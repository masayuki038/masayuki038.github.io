<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on act-act</title>
    <link>/categories/java/</link>
    <description>Recent content in Java on act-act</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 09 Mar 2019 00:00:01 +0000</lastBuildDate>
    
	<atom:link href="/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Failed to generate Javadoc on JDK11</title>
      <link>/blog/2019/03/09/fail-to-generate-javadoc-on-jdk11/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:01 +0000</pubDate>
      
      <guid>/blog/2019/03/09/fail-to-generate-javadoc-on-jdk11/</guid>
      <description>JDK11 で Javadoc の生成に失敗することがありました。 [ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.0.1:jar (attach-javadocs) on project sqlline: MavenReportException: Error while generating Javadoc: [ERROR] Exit code: 1 - Picked up JAVA_TOOL_OPTIONS: -XX:+UseContainerSupport [ERROR] javadoc: error - The code being documented uses modules but the packages defined in https://docs.oracle.com/javase/8/docs/api/ are in the unnamed module. [ERROR] [ERROR] Command line was:</description>
    </item>
    
    <item>
      <title>sqlline の実行環境を jlink で作成する</title>
      <link>/blog/2019/03/03/try-sqlline-jlink/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/03/03/try-sqlline-jlink/</guid>
      <description>JDBC 経由で DB に接続したい時に、sqlline という SQL コマンドラインツールを使っています。このツールは既に fatjar や Docker Image でも提供されているのですが、J</description>
    </item>
    
    <item>
      <title>Getting Started with Quasar</title>
      <link>/blog/2015/01/03/getting-started-with-quasar/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/2015/01/03/getting-started-with-quasar/</guid>
      <description>Quasar - Fiber, Channel, Actor Quasarは軽量スレッド、GoライクなChannl、ErlangライクなActorや、非同期プログラミングツールを提供するJav</description>
    </item>
    
    <item>
      <title>Print JIT-compiled code</title>
      <link>/blog/2012/05/13/see-jit-compiled-code/</link>
      <pubDate>Sun, 13 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/05/13/see-jit-compiled-code/</guid>
      <description>How do you check performance optimized code? 前回、インライン化を確認する為に最初に調べたことは、インライン化されたコードの確認方法でした。調べた範囲ではアセンブリコードで</description>
    </item>
    
    <item>
      <title>Inlining By JIT Compiler</title>
      <link>/blog/2012/05/12/inlining-by-jit/</link>
      <pubDate>Sat, 12 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/05/12/inlining-by-jit/</guid>
      <description>Inlining or not? 前回のエントリで、インライン化についてちょっと触れました。 ちなみにCharacter#charCountは補助文字の場合に2が、それ以</description>
    </item>
    
    <item>
      <title>UTF-8 Encoding Performance in Java Part 2</title>
      <link>/blog/2012/05/06/get-utf8-bytes2/</link>
      <pubDate>Sun, 06 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/05/06/get-utf8-bytes2/</guid>
      <description>NIO ByteBuffer 前回の続き。結局、BSONEncoder#_putのUTF-8変換のコードが遅い理由が分からなかったので、UTF-8のバイト配列を生成す</description>
    </item>
    
    <item>
      <title>UTF-8 Encoding Performance in Java</title>
      <link>/blog/2012/05/04/get-utf8-bytes/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/05/04/get-utf8-bytes/</guid>
      <description>Which is faster? 前回のプロファイリングにて、文字列をUTF-8に変換する処理に速度差がありそうだという結果になった為、String#getBytes(</description>
    </item>
    
    <item>
      <title>Java NIO2 Asynchronous</title>
      <link>/blog/2012/04/30/nio2-asyncio/</link>
      <pubDate>Mon, 30 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/30/nio2-asyncio/</guid>
      <description>Asynchronous 前回ノンブロッキングI/Oを使ってみましたが、今回はNIO2の非同期I/Oを試してみます。 NIO2の非同期I/Oは、大きく2つの方法が提供</description>
    </item>
    
    <item>
      <title>Java NIO Non-Blocking I/O</title>
      <link>/blog/2012/04/27/nio-non-blocking/</link>
      <pubDate>Fri, 27 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/27/nio-non-blocking/</guid>
      <description>configureBlocking(false) 前回のコードで、acceptした後にOP_READでselectorにregisterする直前に、以下のような記述がありました。 SocketChannel channel = serverChannel.accept(); channel.configureBlocking(false);</description>
    </item>
    
    <item>
      <title>Java NIO I/O Multiplexing2(solved)</title>
      <link>/blog/2012/04/26/nio-multiplexing2/</link>
      <pubDate>Thu, 26 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/26/nio-multiplexing2/</guid>
      <description>Stack Overflow 前回のnioのsocket readがbusy loopになってしまう問題について、Stack Overflowでも同じような事象が出ていまし</description>
    </item>
    
    <item>
      <title>Java NIO I/O Multiplexing</title>
      <link>/blog/2012/04/22/nio-multiplexing/</link>
      <pubDate>Sun, 22 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/22/nio-multiplexing/</guid>
      <description>Introduction たまたま仕事でnioを使っているコードを読む機会があり、それをキッカケにnioのI/O多重化を試してみました。 Single Process, Single Thread, I/O Multiplexing 「シングルプロセ</description>
    </item>
    
  </channel>
</rss>