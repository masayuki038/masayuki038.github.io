<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>act-act</title>
    <link>/</link>
    <description>Recent content on act-act</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 06 Apr 2019 00:00:01 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java / Gandiva on Windows</title>
      <link>/blog/2019/04/06/java-gandiva-on-windows/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:01 +0000</pubDate>
      
      <guid>/blog/2019/04/06/java-gandiva-on-windows/</guid>
      <description>Apache Arrow の Issue を watch していたら、Gandiva が Windows 環境でも動くようになっていたので、開発環境を構築しました。 C++ Development Setup Gandiva は C++ で開発されているので、まず C++</description>
    </item>
    
    <item>
      <title>Hadoop / Spark Conference 2019 Japan</title>
      <link>/blog/2019/03/17/hadoop-spark-conference-2019/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:01 +0000</pubDate>
      
      <guid>/blog/2019/03/17/hadoop-spark-conference-2019/</guid>
      <description>3&amp;frasl;14 に開催された Hadoop / Spark Conference 2019 Japan に行ってきました。参加したセッションの内容と感想を書いてみました。 Hadoop / Spark Conference Japan 2019 ご挨拶・開催にあたって 「Hadoop</description>
    </item>
    
    <item>
      <title>Failed to generate Javadoc on JDK11</title>
      <link>/blog/2019/03/09/fail-to-generate-javadoc-on-jdk11/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:01 +0000</pubDate>
      
      <guid>/blog/2019/03/09/fail-to-generate-javadoc-on-jdk11/</guid>
      <description>JDK11 で Javadoc の生成に失敗することがありました。 [ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.0.1:jar (attach-javadocs) on project sqlline: MavenReportException: Error while generating Javadoc: [ERROR] Exit code: 1 - Picked up JAVA_TOOL_OPTIONS: -XX:+UseContainerSupport [ERROR] javadoc: error - The code being documented uses modules but the packages defined in https://docs.oracle.com/javase/8/docs/api/ are in the unnamed module. [ERROR] [ERROR] Command line was:</description>
    </item>
    
    <item>
      <title>sqlline の実行環境を jlink で作成する</title>
      <link>/blog/2019/03/03/try-sqlline-jlink/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/03/03/try-sqlline-jlink/</guid>
      <description>JDBC 経由で DB に接続したい時に、sqlline という SQL コマンドラインツールを使っています。このツールは既に fatjar や Docker Image でも提供されているのですが、J</description>
    </item>
    
    <item>
      <title>parquet-cli-java</title>
      <link>/blog/2019/02/19/parquet-cli/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/02/19/parquet-cli/</guid>
      <description>dev@parquet.apache.org で、parquet-mr の古いモジュールの廃止案が出ています。廃止対象の中には Parquet ファイルの情報を出力する Command Line Tool の parquet-tools も含まれています。 [DISCUSS] Remove old</description>
    </item>
    
    <item>
      <title>Parquet ColumnIndex</title>
      <link>/blog/2019/02/10/parquet-column-index/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/02/10/parquet-column-index/</guid>
      <description>もうすぐリリースされる parquet-1.11.0 には、ColumnIndex という機能が追加されています。 ColumnIndex Layout to Support Page Skipping そこで、この ColumnIndex について調べてみました。 これまで</description>
    </item>
    
    <item>
      <title>Rust で書かれた Query Engine のコードを眺めた</title>
      <link>/blog/2019/01/13/data-fusion/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/01/13/data-fusion/</guid>
      <description>dev@arrow.apache.org を見てたら、Rust で Query Engine を書いている話が出ていた。これは Apache Arrow の Commiter である Andy Grove が作っている DataFusion というプロジェクト。 https://github.com/andygrove/datafusion The current code supports single-threaded execution of limited SQL queries (projection, selection, and</description>
    </item>
    
    <item>
      <title>『リーン開発の現場』を読んだ</title>
      <link>/blog/2019/01/20/lean-from-the-trenches/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/01/20/lean-from-the-trenches/</guid>
      <description>昨年から Scrum 開発のプロジェクトに参加している。その中で色々と思うことがあり、他のプロジェクトでの採用事例や実際に行われているプラクティスを知り</description>
    </item>
    
    <item>
      <title>『Efficient Data Transfer Mechanisms on Analytics Data Processing System』を読んだ</title>
      <link>/blog/2019/01/06/efficent-data-transper-mechanisms/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/01/06/efficent-data-transper-mechanisms/</guid>
      <description>Calcite の Adapter を書いている中で、それぞれのRelNode(Scan/Filter/Aggregation &amp;hellip;) の結果(タプル)の生成と、それに使用される</description>
    </item>
    
    <item>
      <title>Serialize/Deserialize With Apache Arrow</title>
      <link>/blog/2017/06/17/file-serdes-with-apache-arrow/</link>
      <pubDate>Sat, 17 Jun 2017 12:57:35 +0000</pubDate>
      
      <guid>/blog/2017/06/17/file-serdes-with-apache-arrow/</guid>
      <description>Apache Arrow Apache Arrow is an in-memory columnar data format across various systems such as Apache Spark, Impala, Apache Drill.
Arrow have a columnar data represent format - Value Vectors. There are various types of value vectors depending on the data type. In this post, I serialize NullableIntVector to a file and deserialize from it.
Sample Code Getting Started The arrow-vector module is already in maven repos.
pom.xml: 1&amp;lt;dependencies&amp;gt; 2 &amp;lt;!</description>
    </item>
    
    <item>
      <title>Debugging Apache Drill on Windows</title>
      <link>/blog/2017/06/04/drill-remote-debugging/</link>
      <pubDate>Sun, 04 Jun 2017 12:57:35 +0000</pubDate>
      
      <guid>/blog/2017/06/04/drill-remote-debugging/</guid>
      <description>TL;DR I try to remote debug Apache Drill in Embedded Mode with IntelliJ on Windows10.
Prerequirements  Apache Drill installation Apache Drill source code(same version) IDEA IntelliJ  Set DRILL_SHELL_JAVA_OPTS Using sqlline.bat for starting drill as embedded mode. We can set debug options to DRILL_SHELL_JAVA_OPTS.
1set DRILL_SHELL_JAVA_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 Timeout Configuration To avoid timeout for debugging, set drill.exec.rpc.user.timeout to 0 in drill-override.conf.
drill-override.conf: 1drill.exec: { 2 cluster-id: &amp;#34;drillbits1&amp;#34;, 3 zk.connect: &amp;#34;localhost:2181&amp;#34;, 4 rpc: { 5 user: { 6 timeout: 0 7 } 8 } 9}</description>
    </item>
    
    <item>
      <title>Migrate to Jekyll3</title>
      <link>/blog/2017/05/06/migrate-to-jekyll3/</link>
      <pubDate>Sat, 06 May 2017 12:57:35 +0000</pubDate>
      
      <guid>/blog/2017/05/06/migrate-to-jekyll3/</guid>
      <description>Blog upgrade once a year 昨年のGW中にOctopressのupgradeをしたのを最後にblogの更新をしなかったので、もう改めて手を入れる必要はないと思</description>
    </item>
    
    <item>
      <title>Update Octopress to 3.0</title>
      <link>/blog/2016/05/04/update-octopress/</link>
      <pubDate>Wed, 04 May 2016 14:24:20 +0000</pubDate>
      
      <guid>/blog/2016/05/04/update-octopress/</guid>
      <description>大分blogの更新をサボっていましたが、GWでちょっと時間ができたので、Octopressを3.0にアップデートしました。最初に構築した際の</description>
    </item>
    
    <item>
      <title>Getting Started with Quasar</title>
      <link>/blog/2015/01/03/getting-started-with-quasar/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/2015/01/03/getting-started-with-quasar/</guid>
      <description>Quasar - Fiber, Channel, Actor Quasarは軽量スレッド、GoライクなChannl、ErlangライクなActorや、非同期プログラミングツールを提供するJav</description>
    </item>
    
    <item>
      <title>Debugging Maven Plugins</title>
      <link>/blog/2014/08/24/mvndebug/</link>
      <pubDate>Sun, 24 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/08/24/mvndebug/</guid>
      <description>Maven plugin throw some exception eclipseでincubator-parquet-mrのコードをビルドする為に、mvn eclipse:eclipseを実行したと</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part11</title>
      <link>/blog/2014/08/17/couchdb-code-reading11/</link>
      <pubDate>Sun, 17 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/08/17/couchdb-code-reading11/</guid>
      <description>remainging code of couch_db:update_docs/4 前回まででcouch_db:doc_flush_atts/2の一連の処理を読み終えました。久々にcouch_db:update_do</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part10</title>
      <link>/blog/2014/08/03/couchdb-code-reading10/</link>
      <pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/08/03/couchdb-code-reading10/</guid>
      <description>前回、アタッチメントをファイルに書き込む箇所を読んだのですが、書き込んだデータがアタッチメントかどうかをどのように判別できるようにしているの</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part9</title>
      <link>/blog/2014/07/27/couchdb-code-reading9/</link>
      <pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/07/27/couchdb-code-reading9/</guid>
      <description>couch_db:update_doc/4 引き続きcouch_db:update_docs/4を。 couch_db.erl: 1 if (AllOrNothing) and (PreCommitFailures /= []) -&amp;gt; 2 {aborted, 3 lists:foldl(fun({#doc{id=Id,revs=Revs}, Ref},Acc) -&amp;gt; 4 case lists:keyfind(Ref,1,PreCommitFailures) of 5 {Ref, Error} -&amp;gt; 6 case Revs of 7 {Pos, [RevId|_]} -&amp;gt; 8 [{{Id,{Pos, RevId}}, Error} | Acc]; 9 {0, []} -&amp;gt;</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part8</title>
      <link>/blog/2014/07/19/couchdb-code-reading8/</link>
      <pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/07/19/couchdb-code-reading8/</guid>
      <description>couch_db:update_doc/4 前回からの続きで、couch_db:update_docs/4の続きを。 couch_db.erl: 1 case (Db#db.validate_doc_funs /= []) orelse 2 lists:any( 3 fun({#doc{id= &amp;lt;&amp;lt;?DESIGN_DOC_PREFIX, _/binary&amp;gt;&amp;gt;}, _Ref}) -&amp;gt; 4 true; 5 ({#doc{atts=Atts}, _Ref}) -&amp;gt; 6 Atts /= [] 7 end, Docs3) of 8 true -&amp;gt; 9</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part7</title>
      <link>/blog/2014/07/12/couchdb-code-reading7/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/07/12/couchdb-code-reading7/</guid>
      <description>couch_db:update_doc/4 前回はHTTP経由でドキュメントを更新する流れを見てきました。今回は更新まわりのより深いところを見ていこうと思います。前回の流れからcou</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part6</title>
      <link>/blog/2014/07/05/couchdb-code-reading6/</link>
      <pubDate>Sat, 05 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/07/05/couchdb-code-reading6/</guid>
      <description>couch_httpd_db:db_req/2 前回までドキュメントの取得の流れを見てきたので、次に更新まわりを見ていこうと思います。 couch_httpd_db.erl: 1db_req(#httpd{method=&amp;#39;POST&amp;#39;,path_parts=[_DbName]}=Req, Db) -&amp;gt; 2 couch_httpd:validate_ctype(Req, &amp;#34;application/json&amp;#34;), 3 Doc = couch_doc:from_json_obj(couch_httpd:json_body(Req)), 4 validate_attachment_names(Doc), 5 Doc2 = case Doc#doc.id of 6 &amp;lt;&amp;lt;&amp;#34;&amp;#34;&amp;gt;&amp;gt; -&amp;gt; 7 Doc#doc{id=couch_uuids:new(), revs={0, []}};</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part5</title>
      <link>/blog/2014/06/21/couchdb-code-reading5/</link>
      <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/06/21/couchdb-code-reading5/</guid>
      <description>couch_db:open_doc_int/3 前回はcouch_db_updater:refresh_validate_doc_funs/1を読んでいく中でDesignDocsを取得す</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part4</title>
      <link>/blog/2014/06/08/couchdb-code-reading4/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/06/08/couchdb-code-reading4/</guid>
      <description>couch_db_updater:refresh_validate_doc_funs/1 今回はcouch_db_updater:init/1から呼び出している関数の中でまだ見ていないrefresh_validate_doc_f</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part3</title>
      <link>/blog/2014/05/30/couchdb-code-reading3/</link>
      <pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/05/30/couchdb-code-reading3/</guid>
      <description>couch_db_updater:init_db/6の以下の部分を掘り下げてみたいと思います。 couch_db_updater.erl: 1 {ok, IdBtree} = couch_btree:open(Header#db_header.fulldocinfo_by_id_btree_state, Fd, 2 [{split, fun(X) -&amp;gt; btree_by_id_split(X) end}, 3 {join, fun(X,Y) -&amp;gt; btree_by_id_join(X,Y) end}, 4 {reduce, fun(X,Y) -&amp;gt;</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part2</title>
      <link>/blog/2014/05/25/couchdb-code-reading2/</link>
      <pubDate>Sun, 25 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/05/25/couchdb-code-reading2/</guid>
      <description>couch_db_updater:init/1 前回はヘッダ部を読み込むコードを読んだので、今回はDBの読み込み準備？のところを読んでみます。couch_db_updater:init/</description>
    </item>
    
    <item>
      <title>CouchDB Source Code Reading part1</title>
      <link>/blog/2014/05/24/couchdb-code-reading1/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/05/24/couchdb-code-reading1/</guid>
      <description>Why CouchDB? 数年前にCouchDBのデータフォーマットについて解説しているページを読みました。CouchDBの内部ではデータをB+treeで保持して</description>
    </item>
    
    <item>
      <title>Development Environment For Rails4 With Docker And Ansible</title>
      <link>/blog/2014/02/22/devenv-rails4-with-docker-ansible/</link>
      <pubDate>Sat, 22 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/02/22/devenv-rails4-with-docker-ansible/</guid>
      <description>DockerとAnsibleを使ってRails4の開発環境を作ってみました。 Environment ruby2.1.0 rails4 emacs24 ruby-mode rinari rhtml Docker Dockerfileにはsshdでログインできる</description>
    </item>
    
    <item>
      <title>Serf Source Code Reading part2</title>
      <link>/blog/2014/01/19/serf-code-reading2/</link>
      <pubDate>Sun, 19 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/01/19/serf-code-reading2/</guid>
      <description>前回のmemberlistに続き、今回はserfのコードを読んでみました。 Serf Summery serfは、memberlistを利用してクラスタ内のノードの</description>
    </item>
    
    <item>
      <title>Serf Source Code Reading</title>
      <link>/blog/2014/01/13/serf-code-reading/</link>
      <pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/01/13/serf-code-reading/</guid>
      <description>このところ、Serfのコードを読んでいました。一旦、読んで理解した内容をまとめてみたいと思います。 Packages Serfは大きく次の2つのパッケージに分</description>
    </item>
    
    <item>
      <title>How to assign a port mapping to a running docker container</title>
      <link>/2013/12/30/how-to-assign-a-port-mapping-to-an-running-docker-container/</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013/12/30/how-to-assign-a-port-mapping-to-an-running-docker-container/</guid>
      <description>Docker ちょっと前にVPSサービスの乗り換えをしました。それまで、1つのVPS仮想ノードに複数のサービスを置いていたのですが、この乗り換えを機にD</description>
    </item>
    
    <item>
      <title>How to create Mock Hive Server</title>
      <link>/blog/2013/10/13/mock-hive-server/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/10/13/mock-hive-server/</guid>
      <description>We need a Mock Hive Server for tests 以前、thrift_erlを使ってHiveクライアントを作成しました。このHiveクライアントのテストを書こうとすると、Hi</description>
    </item>
    
    <item>
      <title>erlcscope and ascope.el</title>
      <link>/blog/2013/09/23/erlcscope-and-ascope-el/</link>
      <pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/23/erlcscope-and-ascope-el/</guid>
      <description>Browsing Erlang code EmacsでErlangのコードをリファクタリングしていると、ある関数を呼び出している関数をすべてピックアップしたい、ということがあり</description>
    </item>
    
    <item>
      <title>Package and Init-loader For Emacs</title>
      <link>/blog/2013/09/21/package-el-and-init-loader-el/</link>
      <pubDate>Sat, 21 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/21/package-el-and-init-loader-el/</guid>
      <description>Simple package manager for Emacs 前回Erlangの開発環境の話を書きましたが、普段はEmacsを使うことがあまりないので、Emacs事情に詳しくありません。そんな</description>
    </item>
    
    <item>
      <title>Little improvement in development environment for Erlang</title>
      <link>/blog/2013/09/16/devenv-for-erlang/</link>
      <pubDate>Mon, 16 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/16/devenv-for-erlang/</guid>
      <description>erl-shib ここ最近は、Erlangの習作としてshibのクローンを作ってました。erl-shibと言います。HQLを実行して結果を取得するところまで</description>
    </item>
    
    <item>
      <title>Connecting to Hive from Erlang using Thrift part2</title>
      <link>/blog/2013/06/09/thrift-hive-part2/</link>
      <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/06/09/thrift-hive-part2/</guid>
      <description>Failed to connect Hive Server 前回「thrift_client_util:new/4」で失敗していた件について調べてみたところ、thrift_erlangという</description>
    </item>
    
    <item>
      <title>Connecting to Hive from Erlang using Thrift part1</title>
      <link>/blog/2013/06/05/thrift-hive-part1/</link>
      <pubDate>Wed, 05 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/06/05/thrift-hive-part1/</guid>
      <description>Connecting to Hive from Erlang ErlangでHiveに接続し、クエリを実行させてその結果を取得する、ということができないか試してみました。HiveはThrift</description>
    </item>
    
    <item>
      <title>Erlang mode and Distel</title>
      <link>/blog/2013/04/18/erlang-mode-and-distel/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/04/18/erlang-mode-and-distel/</guid>
      <description>Erlang IDE 前回のポストからかなり時間が経ちましたが、少し時間ができたので、暫くErlangで遊んでみようと思います。 Erlangの開発環境ですが、</description>
    </item>
    
    <item>
      <title>B&#43;Tree in Ruby</title>
      <link>/blog/2012/08/09/b-plus-tree-in-ruby/</link>
      <pubDate>Thu, 09 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/08/09/b-plus-tree-in-ruby/</guid>
      <description>B+Tree And Ruby 以前、java.util.MapをBSONでファイルに保存するFileStoredMapというコレクションクラスを書きました。 今度はそ</description>
    </item>
    
    <item>
      <title>Ordered And Ordering</title>
      <link>/blog/2012/07/23/ordered-and-ordering-in-scala/</link>
      <pubDate>Mon, 23 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/07/23/ordered-and-ordering-in-scala/</guid>
      <description>Ordered and Ordering Scalaには2値の比較を扱うtraitがあります。一つはComparable[T]を継承しているOredered[T]、もう一つはC</description>
    </item>
    
    <item>
      <title>Implicit Conversion in Scala</title>
      <link>/blog/2012/07/16/implicit-conversion-in-scala/</link>
      <pubDate>Mon, 16 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/07/16/implicit-conversion-in-scala/</guid>
      <description>Actor model in Scala 先週、ちょっとしたアイデアとアクターモデルの相性が良いことに気がつき、アクターモデルを使ってコードを書いてみたいと思うようになりまし</description>
    </item>
    
    <item>
      <title>Translating &#39;Appendix: Redis expires&#39; in Japanese</title>
      <link>/blog/2012/06/24/translate-redis-expire-appendix/</link>
      <pubDate>Sun, 24 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/06/24/translate-redis-expire-appendix/</guid>
      <description>The behaviour of key expiration in Redis Redisのkeyのexpirationを理解する為に、以下のページの「Appendix: Redis expires」を和訳してみました</description>
    </item>
    
    <item>
      <title>Print JIT-compiled code</title>
      <link>/blog/2012/05/13/see-jit-compiled-code/</link>
      <pubDate>Sun, 13 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/05/13/see-jit-compiled-code/</guid>
      <description>How do you check performance optimized code? 前回、インライン化を確認する為に最初に調べたことは、インライン化されたコードの確認方法でした。調べた範囲ではアセンブリコードで</description>
    </item>
    
    <item>
      <title>Inlining By JIT Compiler</title>
      <link>/blog/2012/05/12/inlining-by-jit/</link>
      <pubDate>Sat, 12 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/05/12/inlining-by-jit/</guid>
      <description>Inlining or not? 前回のエントリで、インライン化についてちょっと触れました。 ちなみにCharacter#charCountは補助文字の場合に2が、それ以</description>
    </item>
    
    <item>
      <title>UTF-8 Encoding Performance in Java Part 2</title>
      <link>/blog/2012/05/06/get-utf8-bytes2/</link>
      <pubDate>Sun, 06 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/05/06/get-utf8-bytes2/</guid>
      <description>NIO ByteBuffer 前回の続き。結局、BSONEncoder#_putのUTF-8変換のコードが遅い理由が分からなかったので、UTF-8のバイト配列を生成す</description>
    </item>
    
    <item>
      <title>UTF-8 Encoding Performance in Java</title>
      <link>/blog/2012/05/04/get-utf8-bytes/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/05/04/get-utf8-bytes/</guid>
      <description>Which is faster? 前回のプロファイリングにて、文字列をUTF-8に変換する処理に速度差がありそうだという結果になった為、String#getBytes(</description>
    </item>
    
    <item>
      <title>FileStoredMap writing part 1</title>
      <link>/blog/2012/05/03/fsm-bdb-write1/</link>
      <pubDate>Thu, 03 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/05/03/fsm-bdb-write1/</guid>
      <description>Reading and Writing of FileStoredMap 以前、拙作のFileStoredMap(以下、FSM)がBerkeleyDB(以下、BDB)とどのくらい速度差があるか確認しました</description>
    </item>
    
    <item>
      <title>Java NIO2 Asynchronous</title>
      <link>/blog/2012/04/30/nio2-asyncio/</link>
      <pubDate>Mon, 30 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/30/nio2-asyncio/</guid>
      <description>Asynchronous 前回ノンブロッキングI/Oを使ってみましたが、今回はNIO2の非同期I/Oを試してみます。 NIO2の非同期I/Oは、大きく2つの方法が提供</description>
    </item>
    
    <item>
      <title>Java NIO Non-Blocking I/O</title>
      <link>/blog/2012/04/27/nio-non-blocking/</link>
      <pubDate>Fri, 27 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/27/nio-non-blocking/</guid>
      <description>configureBlocking(false) 前回のコードで、acceptした後にOP_READでselectorにregisterする直前に、以下のような記述がありました。 SocketChannel channel = serverChannel.accept(); channel.configureBlocking(false);</description>
    </item>
    
    <item>
      <title>Java NIO I/O Multiplexing2(solved)</title>
      <link>/blog/2012/04/26/nio-multiplexing2/</link>
      <pubDate>Thu, 26 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/26/nio-multiplexing2/</guid>
      <description>Stack Overflow 前回のnioのsocket readがbusy loopになってしまう問題について、Stack Overflowでも同じような事象が出ていまし</description>
    </item>
    
    <item>
      <title>Java NIO I/O Multiplexing</title>
      <link>/blog/2012/04/22/nio-multiplexing/</link>
      <pubDate>Sun, 22 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/22/nio-multiplexing/</guid>
      <description>Introduction たまたま仕事でnioを使っているコードを読む機会があり、それをキッカケにnioのI/O多重化を試してみました。 Single Process, Single Thread, I/O Multiplexing 「シングルプロセ</description>
    </item>
    
    <item>
      <title>Java Benchmark Framework</title>
      <link>/blog/2012/04/15/file-stored-map-bench2/</link>
      <pubDate>Sun, 15 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/15/file-stored-map-bench2/</guid>
      <description>FileStoredMapはJava Heapを使わない代わりに動作が重いので、Berkeley DB Java Edition(以下BDB)と速度比較を数</description>
    </item>
    
    <item>
      <title>ArtifactResolutionException raised</title>
      <link>/blog/2012/04/10/maven-repo-problem/</link>
      <pubDate>Tue, 10 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/10/maven-repo-problem/</guid>
      <description>m2eclipseでArtifactResolutionExceptionが出て困った話。 Mavenのリモートリポジトリで管理されていないj</description>
    </item>
    
    <item>
      <title>FileStoredMap</title>
      <link>/blog/2012/04/08/file-stored-map/</link>
      <pubDate>Sun, 08 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/08/file-stored-map/</guid>
      <description>以前、ストレージからデータを読み込む処理が遅い為に、あるバッチの実行が完了するまでにかなりの時間を要することがありました。 データの読み込みは</description>
    </item>
    
    <item>
      <title>start</title>
      <link>/blog/2012/04/06/start/</link>
      <pubDate>Fri, 06 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/04/06/start/</guid>
      <description>以前からOctopressが良いなと思っていたものの、ホスティングサービスを見つけられず、とはいえ自前で構築するのもちょっと面倒に思え、手が</description>
    </item>
    
  </channel>
</rss>